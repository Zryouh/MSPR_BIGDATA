// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mspr.loadbnls_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: Loadbnls Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.1.1.20181026_1147
 * @status 
 */
public class Loadbnls implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Loadbnls";
	private final String projectName = "MSPR";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap
				.put(KEY_DB_DATASOURCES_RAW,
						new java.util.HashMap<String, javax.sql.DataSource>(
								dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent
						+ " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Loadbnls.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Loadbnls.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent,
				globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MSPR_Loadbnls = new byte[0];
		static byte[] commonByteArray_MSPR_Loadbnls = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String id;

		public String getId() {
			return this.id;
		}

		public String nom;

		public String getNom() {
			return this.nom;
		}

		public Integer insee;

		public Integer getInsee() {
			return this.insee;
		}

		public String adresse;

		public String getAdresse() {
			return this.adresse;
		}

		public String url;

		public String getUrl() {
			return this.url;
		}

		public String type_usagers;

		public String getType_usagers() {
			return this.type_usagers;
		}

		public Integer gratuit;

		public Integer getGratuit() {
			return this.gratuit;
		}

		public Integer nb_places;

		public Integer getNb_places() {
			return this.nb_places;
		}

		public String nb_pr;

		public String getNb_pr() {
			return this.nb_pr;
		}

		public Integer nb_pmr;

		public Integer getNb_pmr() {
			return this.nb_pmr;
		}

		public String nb_voitures_electriques;

		public String getNb_voitures_electriques() {
			return this.nb_voitures_electriques;
		}

		public String nb_velo;

		public String getNb_velo() {
			return this.nb_velo;
		}

		public String nb_2r_el;

		public String getNb_2r_el() {
			return this.nb_2r_el;
		}

		public Integer nb_autopartage;

		public Integer getNb_autopartage() {
			return this.nb_autopartage;
		}

		public String nb_2_rm;

		public String getNb_2_rm() {
			return this.nb_2_rm;
		}

		public String nb_covoit;

		public String getNb_covoit() {
			return this.nb_covoit;
		}

		public String hauteur_max;

		public String getHauteur_max() {
			return this.hauteur_max;
		}

		public String num_siret;

		public String getNum_siret() {
			return this.num_siret;
		}

		public Double Xlong;

		public Double getXlong() {
			return this.Xlong;
		}

		public Float Ylat;

		public Float getYlat() {
			return this.Ylat;
		}

		public String tarif_pmr;

		public String getTarif_pmr() {
			return this.tarif_pmr;
		}

		public String tarif_1h;

		public String getTarif_1h() {
			return this.tarif_1h;
		}

		public String tarif_2h;

		public String getTarif_2h() {
			return this.tarif_2h;
		}

		public String tarif_3h;

		public String getTarif_3h() {
			return this.tarif_3h;
		}

		public String tarif_4h;

		public String getTarif_4h() {
			return this.tarif_4h;
		}

		public String tarif_24h;

		public String getTarif_24h() {
			return this.tarif_24h;
		}

		public String abo_resident;

		public String getAbo_resident() {
			return this.abo_resident;
		}

		public String abo_non_resident;

		public String getAbo_non_resident() {
			return this.abo_non_resident;
		}

		public String type_ouvrage;

		public String getType_ouvrage() {
			return this.type_ouvrage;
		}

		public String info;

		public String getInfo() {
			return this.info;
		}

		public String id_source;

		public String getId_source() {
			return this.id_source;
		}

		public String Column31;

		public String getColumn31() {
			return this.Column31;
		}

		public String Column32;

		public String getColumn32() {
			return this.Column32;
		}

		public String Column33;

		public String getColumn33() {
			return this.Column33;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.id == null) ? 0 : this.id.hashCode());

				result = prime
						* result
						+ ((this.id_source == null) ? 0 : this.id_source
								.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.id == null) {
				if (other.id != null)
					return false;

			} else if (!this.id.equals(other.id))

				return false;

			if (this.id_source == null) {
				if (other.id_source != null)
					return false;

			} else if (!this.id_source.equals(other.id_source))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.id = this.id;
			other.nom = this.nom;
			other.insee = this.insee;
			other.adresse = this.adresse;
			other.url = this.url;
			other.type_usagers = this.type_usagers;
			other.gratuit = this.gratuit;
			other.nb_places = this.nb_places;
			other.nb_pr = this.nb_pr;
			other.nb_pmr = this.nb_pmr;
			other.nb_voitures_electriques = this.nb_voitures_electriques;
			other.nb_velo = this.nb_velo;
			other.nb_2r_el = this.nb_2r_el;
			other.nb_autopartage = this.nb_autopartage;
			other.nb_2_rm = this.nb_2_rm;
			other.nb_covoit = this.nb_covoit;
			other.hauteur_max = this.hauteur_max;
			other.num_siret = this.num_siret;
			other.Xlong = this.Xlong;
			other.Ylat = this.Ylat;
			other.tarif_pmr = this.tarif_pmr;
			other.tarif_1h = this.tarif_1h;
			other.tarif_2h = this.tarif_2h;
			other.tarif_3h = this.tarif_3h;
			other.tarif_4h = this.tarif_4h;
			other.tarif_24h = this.tarif_24h;
			other.abo_resident = this.abo_resident;
			other.abo_non_resident = this.abo_non_resident;
			other.type_ouvrage = this.type_ouvrage;
			other.info = this.info;
			other.id_source = this.id_source;
			other.Column31 = this.Column31;
			other.Column32 = this.Column32;
			other.Column33 = this.Column33;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.id = this.id;
			other.id_source = this.id_source;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MSPR_Loadbnls.length) {
					if (length < 1024
							&& commonByteArray_MSPR_Loadbnls.length == 0) {
						commonByteArray_MSPR_Loadbnls = new byte[1024];
					} else {
						commonByteArray_MSPR_Loadbnls = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MSPR_Loadbnls, 0, length);
				strReturn = new String(commonByteArray_MSPR_Loadbnls, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MSPR_Loadbnls) {

				try {

					int length = 0;

					this.id = readString(dis);

					this.nom = readString(dis);

					this.insee = readInteger(dis);

					this.adresse = readString(dis);

					this.url = readString(dis);

					this.type_usagers = readString(dis);

					this.gratuit = readInteger(dis);

					this.nb_places = readInteger(dis);

					this.nb_pr = readString(dis);

					this.nb_pmr = readInteger(dis);

					this.nb_voitures_electriques = readString(dis);

					this.nb_velo = readString(dis);

					this.nb_2r_el = readString(dis);

					this.nb_autopartage = readInteger(dis);

					this.nb_2_rm = readString(dis);

					this.nb_covoit = readString(dis);

					this.hauteur_max = readString(dis);

					this.num_siret = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Xlong = null;
					} else {
						this.Xlong = dis.readDouble();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Ylat = null;
					} else {
						this.Ylat = dis.readFloat();
					}

					this.tarif_pmr = readString(dis);

					this.tarif_1h = readString(dis);

					this.tarif_2h = readString(dis);

					this.tarif_3h = readString(dis);

					this.tarif_4h = readString(dis);

					this.tarif_24h = readString(dis);

					this.abo_resident = readString(dis);

					this.abo_non_resident = readString(dis);

					this.type_ouvrage = readString(dis);

					this.info = readString(dis);

					this.id_source = readString(dis);

					this.Column31 = readString(dis);

					this.Column32 = readString(dis);

					this.Column33 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.id, dos);

				// String

				writeString(this.nom, dos);

				// Integer

				writeInteger(this.insee, dos);

				// String

				writeString(this.adresse, dos);

				// String

				writeString(this.url, dos);

				// String

				writeString(this.type_usagers, dos);

				// Integer

				writeInteger(this.gratuit, dos);

				// Integer

				writeInteger(this.nb_places, dos);

				// String

				writeString(this.nb_pr, dos);

				// Integer

				writeInteger(this.nb_pmr, dos);

				// String

				writeString(this.nb_voitures_electriques, dos);

				// String

				writeString(this.nb_velo, dos);

				// String

				writeString(this.nb_2r_el, dos);

				// Integer

				writeInteger(this.nb_autopartage, dos);

				// String

				writeString(this.nb_2_rm, dos);

				// String

				writeString(this.nb_covoit, dos);

				// String

				writeString(this.hauteur_max, dos);

				// String

				writeString(this.num_siret, dos);

				// Double

				if (this.Xlong == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.Xlong);
				}

				// Float

				if (this.Ylat == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Ylat);
				}

				// String

				writeString(this.tarif_pmr, dos);

				// String

				writeString(this.tarif_1h, dos);

				// String

				writeString(this.tarif_2h, dos);

				// String

				writeString(this.tarif_3h, dos);

				// String

				writeString(this.tarif_4h, dos);

				// String

				writeString(this.tarif_24h, dos);

				// String

				writeString(this.abo_resident, dos);

				// String

				writeString(this.abo_non_resident, dos);

				// String

				writeString(this.type_ouvrage, dos);

				// String

				writeString(this.info, dos);

				// String

				writeString(this.id_source, dos);

				// String

				writeString(this.Column31, dos);

				// String

				writeString(this.Column32, dos);

				// String

				writeString(this.Column33, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + id);
			sb.append(",nom=" + nom);
			sb.append(",insee=" + String.valueOf(insee));
			sb.append(",adresse=" + adresse);
			sb.append(",url=" + url);
			sb.append(",type_usagers=" + type_usagers);
			sb.append(",gratuit=" + String.valueOf(gratuit));
			sb.append(",nb_places=" + String.valueOf(nb_places));
			sb.append(",nb_pr=" + nb_pr);
			sb.append(",nb_pmr=" + String.valueOf(nb_pmr));
			sb.append(",nb_voitures_electriques=" + nb_voitures_electriques);
			sb.append(",nb_velo=" + nb_velo);
			sb.append(",nb_2r_el=" + nb_2r_el);
			sb.append(",nb_autopartage=" + String.valueOf(nb_autopartage));
			sb.append(",nb_2_rm=" + nb_2_rm);
			sb.append(",nb_covoit=" + nb_covoit);
			sb.append(",hauteur_max=" + hauteur_max);
			sb.append(",num_siret=" + num_siret);
			sb.append(",Xlong=" + String.valueOf(Xlong));
			sb.append(",Ylat=" + String.valueOf(Ylat));
			sb.append(",tarif_pmr=" + tarif_pmr);
			sb.append(",tarif_1h=" + tarif_1h);
			sb.append(",tarif_2h=" + tarif_2h);
			sb.append(",tarif_3h=" + tarif_3h);
			sb.append(",tarif_4h=" + tarif_4h);
			sb.append(",tarif_24h=" + tarif_24h);
			sb.append(",abo_resident=" + abo_resident);
			sb.append(",abo_non_resident=" + abo_non_resident);
			sb.append(",type_ouvrage=" + type_ouvrage);
			sb.append(",info=" + info);
			sb.append(",id_source=" + id_source);
			sb.append(",Column31=" + Column31);
			sb.append(",Column32=" + Column32);
			sb.append(",Column33=" + Column33);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.id, other.id);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.id_source, other.id_source);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception()
						.getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null) {

						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);

					}
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;

				int rejectedCount_tDBOutput_1 = 0;

				String tableName_tDBOutput_1 = "bnls";
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tDBOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				calendar_tDBOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_1 = calendar_tDBOutput_1.getTime()
						.getTime();
				long date_tDBOutput_1;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbProperties_tDBOutput_1 = "allowPublicKeyRetrieval=true&noDatetimeStringSync=true&serverTimezone=UTC&useSSL=false";
				String url_tDBOutput_1 = null;
				if (dbProperties_tDBOutput_1 == null
						|| dbProperties_tDBOutput_1.trim().length() == 0) {
					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "dbmspr" + "?"
							+ "rewriteBatchedStatements=true";
				} else {
					String properties_tDBOutput_1 = "allowPublicKeyRetrieval=true&noDatetimeStringSync=true&serverTimezone=UTC&useSSL=false";
					if (!properties_tDBOutput_1
							.contains("rewriteBatchedStatements")) {
						properties_tDBOutput_1 += "&rewriteBatchedStatements=true";
					}

					url_tDBOutput_1 = "jdbc:mysql://" + "localhost" + ":"
							+ "3306" + "/" + "dbmspr" + "?"
							+ properties_tDBOutput_1;
				}
				String driverClass_tDBOutput_1 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_1 = "root";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("a54bbfcc1190b7e1f4f7aba1746784ea");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				java.lang.Class.forName(driverClass_tDBOutput_1);

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(
						url_tDBOutput_1, dbUser_tDBOutput_1, dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1
						.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1
						.getTables("dbmspr", null, null,
								new String[] { "TABLE" })) {
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1
								.getString("TABLE_NAME");
						if (table_tDBOutput_1.equalsIgnoreCase("bnls")) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1
							.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE `"
								+ tableName_tDBOutput_1 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1
						.createStatement()) {
					stmtCreate_tDBOutput_1
							.execute("CREATE TABLE `"
									+ tableName_tDBOutput_1
									+ "`(`id` VARCHAR(11)  ,`nom` VARCHAR(100)  ,`insee` INT(5)  ,`adresse` VARCHAR(94)  ,`url` VARCHAR(163)  ,`type_usagers` VARCHAR(8)  ,`gratuit` INT(1)  ,`nb_places` INT(4)  ,`nb_pr` VARCHAR(6)  ,`nb_pmr` INT(2)  ,`nb_voitures_electriques` VARCHAR(2)  ,`nb_velo` VARCHAR(4)  ,`nb_2r_el` VARCHAR(2)  ,`nb_autopartage` INT(2)  ,`nb_2_rm` VARCHAR(4)  ,`nb_covoit` VARCHAR(2)  ,`hauteur_max` VARCHAR(3)  ,`num_siret` VARCHAR(11)  ,`Xlong` DOUBLE(10,8)  ,`Ylat` FLOAT(10,8)  ,`tarif_pmr` VARCHAR(13)  ,`tarif_1h` VARCHAR(8)  ,`tarif_2h` VARCHAR(8)  ,`tarif_3h` VARCHAR(5)  ,`tarif_4h` VARCHAR(5)  ,`tarif_24h` VARCHAR(10)  ,`abo_resident` VARCHAR(8)  ,`abo_non_resident` VARCHAR(10)  ,`type_ouvrage` VARCHAR(17)  ,`info` VARCHAR(814)  ,`id_source` VARCHAR(149)  ,`Column31` VARCHAR(36)  ,`Column32` VARCHAR(68)  ,`Column33` VARCHAR(0)  ,primary key(`id`,`id_source`))");
				}

				String insert_tDBOutput_1 = "INSERT INTO `"
						+ "bnls"
						+ "` (`id`,`nom`,`insee`,`adresse`,`url`,`type_usagers`,`gratuit`,`nb_places`,`nb_pr`,`nb_pmr`,`nb_voitures_electriques`,`nb_velo`,`nb_2r_el`,`nb_autopartage`,`nb_2_rm`,`nb_covoit`,`hauteur_max`,`num_siret`,`Xlong`,`Ylat`,`tarif_pmr`,`tarif_1h`,`tarif_2h`,`tarif_3h`,`tarif_4h`,`tarif_24h`,`abo_resident`,`abo_non_resident`,`type_ouvrage`,`info`,`id_source`,`Column31`,`Column32`,`Column33`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_1 = 100;
				int batchSizeCounter_tDBOutput_1 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				try {

					Object filename_tFileInputDelimited_1 = "D:/i1/MSPR2/Dataset/bnls.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0
								|| random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"D:/i1/MSPR2/Dataset/bnls.csv", "UTF-8", ";",
								"\n", false, 1, 0, -1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null
							&& fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row1 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row1 = new row1Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row1.id = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							row1.nom = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.insee = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"insee", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.insee = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							row1.adresse = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row1.url = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row1.type_usagers = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.gratuit = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"gratuit", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.gratuit = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 7;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.nb_places = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"nb_places",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.nb_places = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 8;

							row1.nb_pr = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.nb_pmr = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"nb_pmr", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.nb_pmr = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							row1.nb_voitures_electriques = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 11;

							row1.nb_velo = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row1.nb_2r_el = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.nb_autopartage = ParserUtils
											.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"nb_autopartage",
															"row1", temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.nb_autopartage = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row1.nb_2_rm = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							row1.nb_covoit = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 16;

							row1.hauteur_max = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 17;

							row1.num_siret = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 18;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Xlong = ParserUtils
											.parseTo_Double(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Xlong", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Xlong = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 19;

							temp = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row1.Ylat = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1
											.setException(new RuntimeException(
													String.format(
															"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Ylat", "row1",
															temp,
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
								}

							} else {

								row1.Ylat = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row1.tarif_pmr = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							row1.tarif_1h = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row1.tarif_2h = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row1.tarif_3h = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row1.tarif_4h = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row1.tarif_24h = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row1.abo_resident = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							row1.abo_non_resident = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row1.type_ouvrage = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							row1.info = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 30;

							row1.id_source = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 31;

							row1.Column31 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 32;

							row1.Column32 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 33;

							row1.Column33 = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1
										.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row1 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
						// Start of branch "row1"
						if (row1 != null) {

							/**
							 * [tDBOutput_1 main ] start
							 */

							currentComponent = "tDBOutput_1";

							// row1
							// row1

							if (execStat) {
								runStat.updateStatOnConnection("row1"
										+ iterateId, 1, 1);
							}

							whetherReject_tDBOutput_1 = false;
							if (row1.id == null) {
								pstmt_tDBOutput_1.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(1, row1.id);
							}

							if (row1.nom == null) {
								pstmt_tDBOutput_1.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(2, row1.nom);
							}

							if (row1.insee == null) {
								pstmt_tDBOutput_1.setNull(3,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(3, row1.insee);
							}

							if (row1.adresse == null) {
								pstmt_tDBOutput_1.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(4, row1.adresse);
							}

							if (row1.url == null) {
								pstmt_tDBOutput_1.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(5, row1.url);
							}

							if (row1.type_usagers == null) {
								pstmt_tDBOutput_1.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(6,
										row1.type_usagers);
							}

							if (row1.gratuit == null) {
								pstmt_tDBOutput_1.setNull(7,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(7, row1.gratuit);
							}

							if (row1.nb_places == null) {
								pstmt_tDBOutput_1.setNull(8,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(8, row1.nb_places);
							}

							if (row1.nb_pr == null) {
								pstmt_tDBOutput_1.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(9, row1.nb_pr);
							}

							if (row1.nb_pmr == null) {
								pstmt_tDBOutput_1.setNull(10,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(10, row1.nb_pmr);
							}

							if (row1.nb_voitures_electriques == null) {
								pstmt_tDBOutput_1.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(11,
										row1.nb_voitures_electriques);
							}

							if (row1.nb_velo == null) {
								pstmt_tDBOutput_1.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(12, row1.nb_velo);
							}

							if (row1.nb_2r_el == null) {
								pstmt_tDBOutput_1.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(13, row1.nb_2r_el);
							}

							if (row1.nb_autopartage == null) {
								pstmt_tDBOutput_1.setNull(14,
										java.sql.Types.INTEGER);
							} else {
								pstmt_tDBOutput_1.setInt(14,
										row1.nb_autopartage);
							}

							if (row1.nb_2_rm == null) {
								pstmt_tDBOutput_1.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(15, row1.nb_2_rm);
							}

							if (row1.nb_covoit == null) {
								pstmt_tDBOutput_1.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(16, row1.nb_covoit);
							}

							if (row1.hauteur_max == null) {
								pstmt_tDBOutput_1.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(17,
										row1.hauteur_max);
							}

							if (row1.num_siret == null) {
								pstmt_tDBOutput_1.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(18, row1.num_siret);
							}

							if (row1.Xlong == null) {
								pstmt_tDBOutput_1.setNull(19,
										java.sql.Types.DOUBLE);
							} else {
								pstmt_tDBOutput_1.setDouble(19, row1.Xlong);
							}

							if (row1.Ylat == null) {
								pstmt_tDBOutput_1.setNull(20,
										java.sql.Types.FLOAT);
							} else {
								pstmt_tDBOutput_1.setFloat(20, row1.Ylat);
							}

							if (row1.tarif_pmr == null) {
								pstmt_tDBOutput_1.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(21, row1.tarif_pmr);
							}

							if (row1.tarif_1h == null) {
								pstmt_tDBOutput_1.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(22, row1.tarif_1h);
							}

							if (row1.tarif_2h == null) {
								pstmt_tDBOutput_1.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(23, row1.tarif_2h);
							}

							if (row1.tarif_3h == null) {
								pstmt_tDBOutput_1.setNull(24,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(24, row1.tarif_3h);
							}

							if (row1.tarif_4h == null) {
								pstmt_tDBOutput_1.setNull(25,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(25, row1.tarif_4h);
							}

							if (row1.tarif_24h == null) {
								pstmt_tDBOutput_1.setNull(26,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(26, row1.tarif_24h);
							}

							if (row1.abo_resident == null) {
								pstmt_tDBOutput_1.setNull(27,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(27,
										row1.abo_resident);
							}

							if (row1.abo_non_resident == null) {
								pstmt_tDBOutput_1.setNull(28,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(28,
										row1.abo_non_resident);
							}

							if (row1.type_ouvrage == null) {
								pstmt_tDBOutput_1.setNull(29,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(29,
										row1.type_ouvrage);
							}

							if (row1.info == null) {
								pstmt_tDBOutput_1.setNull(30,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(30, row1.info);
							}

							if (row1.id_source == null) {
								pstmt_tDBOutput_1.setNull(31,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(31, row1.id_source);
							}

							if (row1.Column31 == null) {
								pstmt_tDBOutput_1.setNull(32,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(32, row1.Column31);
							}

							if (row1.Column32 == null) {
								pstmt_tDBOutput_1.setNull(33,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(33, row1.Column32);
							}

							if (row1.Column33 == null) {
								pstmt_tDBOutput_1.setNull(34,
										java.sql.Types.VARCHAR);
							} else {
								pstmt_tDBOutput_1.setString(34, row1.Column33);
							}

							pstmt_tDBOutput_1.addBatch();
							nb_line_tDBOutput_1++;

							batchSizeCounter_tDBOutput_1++;
							if (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
								try {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
												: 1);
									}
									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}
									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									System.err.println(e.getMessage());
								}

								batchSizeCounter_tDBOutput_1 = 0;
							}
							commitCounter_tDBOutput_1++;

							if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {

								try {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
											.executeBatch()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: 1);
									}
									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
								} catch (java.sql.BatchUpdateException e) {
									int countSum_tDBOutput_1 = 0;
									for (int countEach_tDBOutput_1 : e
											.getUpdateCounts()) {
										countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
												: countEach_tDBOutput_1);
									}
									insertedCount_tDBOutput_1 += countSum_tDBOutput_1;
									System.err.println(e.getMessage());

								}
								conn_tDBOutput_1.commit();
								commitCounter_tDBOutput_1 = 0;

							}

							tos_count_tDBOutput_1++;

							/**
							 * [tDBOutput_1 main ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_begin ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_begin ] stop
							 */

							/**
							 * [tDBOutput_1 process_data_end ] start
							 */

							currentComponent = "tDBOutput_1";

							/**
							 * [tDBOutput_1 process_data_end ] stop
							 */

						} // End of branch "row1"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("D:/i1/MSPR2/Dataset/bnls.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE",
								fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (batchSizeCounter_tDBOutput_1 != 0) {
						int countSum_tDBOutput_1 = 0;

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1
								.executeBatch()) {
							countSum_tDBOutput_1 += (countEach_tDBOutput_1 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}

						insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0
								: countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_1 = 0;

				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0) {

					conn_tDBOutput_1.commit();

				}

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1
						+ deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1
						+ updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1
						+ insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1
						+ rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_1);

				if (execStat) {
					if (resourceMap.get("inIterateVComp") == null
							|| !((Boolean) resourceMap.get("inIterateVComp"))) {
						runStat.updateStatOnConnection("row1" + iterateId, 2, 0);
					}
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap
								.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Loadbnls LoadbnlsClass = new Loadbnls();

		int exitCode = LoadbnlsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket
				// can't open
				System.err.println("The statistics socket port " + portStats
						+ " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = Loadbnls.class.getClassLoader()
					.getResourceAsStream(
							"mspr/loadbnls_0_1/contexts/" + contextStr
									+ ".properties");
			if (inContext == null) {
				inContext = Loadbnls.class
						.getClassLoader()
						.getResourceAsStream(
								"config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				defaultProps.load(inContext);
				inContext.close();
				context = new ContextProperties(defaultProps);
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param
				// is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param
							.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Loadbnls");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 71827 characters generated by Talend Open Studio for Data Integration on the
 * 21 juin 2022 00:38:40 CEST
 ************************************************************************************************/
